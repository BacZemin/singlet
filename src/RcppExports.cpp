// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/singlet.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// weight_by_split
Rcpp::S4 weight_by_split(const Rcpp::S4& A_, Rcpp::IntegerVector split_by, const size_t n_groups);
RcppExport SEXP _singlet_weight_by_split(SEXP A_SEXP, SEXP split_bySEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type split_by(split_bySEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_by_split(A_, split_by, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// c_nmf
Rcpp::List c_nmf(Rcpp::SparseMatrix A, Rcpp::SparseMatrix At, const double tol, const uint16_t maxit, const bool verbose, const double L1, const double L2, const uint16_t threads, Eigen::MatrixXd w, Eigen::MatrixXd link_h, Eigen::MatrixXd link_w, const uint32_t seed, const uint32_t inv_density);
RcppExport SEXP _singlet_c_nmf(SEXP ASEXP, SEXP AtSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP threadsSEXP, SEXP wSEXP, SEXP link_hSEXP, SEXP link_wSEXP, SEXP seedSEXP, SEXP inv_densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::SparseMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::SparseMatrix >::type At(AtSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const uint16_t >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< const double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const uint16_t >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type link_h(link_hSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type link_w(link_wSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type inv_density(inv_densitySEXP);
    rcpp_result_gen = Rcpp::wrap(c_nmf(A, At, tol, maxit, verbose, L1, L2, threads, w, link_h, link_w, seed, inv_density));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_singlet_weight_by_split", (DL_FUNC) &_singlet_weight_by_split, 3},
    {"_singlet_c_nmf", (DL_FUNC) &_singlet_c_nmf, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_singlet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
